{
  "name": "Python/Pip/Poetry/Conda",
  "framework": "python",
  "version": "1.0.0",
  "description": "Python项目配置模板，支持多种包管理工具",
  
  "detection": {
    "files": ["requirements.txt", "pyproject.toml", "setup.py", "setup.cfg", "environment.yml", "Pipfile"],
    "directories": ["__pycache__", ".venv", "venv", "env"],
    "package_managers": ["pip", "poetry", "conda", "pipenv"]
  },
  
  "test": {
    "directories": ["tests", "test", "tests/unit", "tests/integration", "tests/e2e"],
    "patterns": {
      "unit": ["test_*.py", "*_test.py", "tests/test_*.py", "tests/*_test.py"],
      "integration": ["test_*_integration.py", "*_integration_test.py"],
      "e2e": ["test_*_e2e.py", "*_e2e_test.py"]
    },
    "frameworks": {
      "unit": ["pytest", "unittest", "nose2", "doctest"],
      "integration": ["pytest-django", "pytest-flask", "requests-mock"],
      "e2e": ["selenium", "playwright", "behave", "pytest-bdd"]
    }
  },
  
  "commands": {
    "pip": {
      "install": "pip install -r requirements.txt",
      "install_dev": "pip install -r requirements-dev.txt",
      "test": "python -m pytest",
      "coverage": "python -m pytest --cov=src",
      "lint": "flake8 src tests && black --check src tests"
    },
    "poetry": {
      "install": "poetry install",
      "install_dev": "poetry install --with dev",
      "test": "poetry run pytest",
      "coverage": "poetry run pytest --cov=src",
      "lint": "poetry run flake8 src tests && poetry run black --check src tests"
    },
    "conda": {
      "install": "conda env create -f environment.yml",
      "activate": "conda activate project-name",
      "test": "python -m pytest",
      "coverage": "python -m pytest --cov=src"
    }
  },
  
  "tools": {
    "testing": {
      "pytest": {
        "config_file": "pytest.ini",
        "commands": {
          "test": "pytest",
          "watch": "pytest-watch",
          "coverage": "pytest --cov=src --cov-report=html",
          "parallel": "pytest -n auto"
        },
        "fixtures": "conftest.py",
        "markers": "pytest.mark.parametrize, pytest.mark.skip"
      },
      "unittest": {
        "commands": {
          "test": "python -m unittest discover",
          "verbose": "python -m unittest discover -v"
        },
        "structure": "继承unittest.TestCase"
      }
    },
    "coverage": {
      "pytest-cov": "pytest --cov=src --cov-report=html",
      "coverage.py": "coverage run -m pytest && coverage report",
      "codecov": "codecov"
    },
    "quality": {
      "flake8": "代码风格检查",
      "black": "代码格式化",
      "isort": "导入排序",
      "mypy": "静态类型检查",
      "pylint": "代码质量分析",
      "bandit": "安全漏洞检查"
    },
    "mocking": {
      "unittest.mock": "标准库Mock",
      "pytest-mock": "pytest mock插件", 
      "responses": "HTTP请求Mock",
      "freezegun": "时间Mock"
    }
  },
  
  "structure": {
    "src_layout": {
      "src/": "源代码目录",
      "tests/": "测试代码目录",
      "docs/": "文档目录",
      "requirements.txt": "依赖声明文件"
    },
    "flat_layout": {
      "package/": "包目录",
      "tests/": "测试目录",
      "setup.py": "安装配置文件"
    },
    "config": {
      "pyproject.toml": "现代Python项目配置",
      "setup.py": "传统安装脚本",
      "pytest.ini": "pytest配置文件",
      "tox.ini": "多环境测试配置",
      ".flake8": "flake8配置文件"
    }
  },
  
  "tdd": {
    "red_phase": {
      "commands": ["pytest tests/test_specific.py::test_method -v"],
      "expectations": "测试失败，明确失败原因和错误信息"
    },
    "green_phase": {
      "commands": ["pytest tests/test_specific.py::test_method -v"],
      "expectations": "最小实现让测试通过，专注功能正确性"
    },
    "refactor_phase": {
      "commands": [
        "pytest",
        "pytest --cov=src --cov-report=term-missing",
        "flake8 src tests",
        "black --check src tests",
        "mypy src"
      ],
      "expectations": "重构代码，保持测试通过，提升代码质量"
    }
  },
  
  "quality_gates": {
    "coverage": {
      "line": 85,
      "branch": 80,
      "missing": 5
    },
    "complexity": {
      "cyclomatic": 10,
      "max_line_length": 88
    },
    "performance": {
      "test_timeout": 300,
      "slow_test_threshold": "1.0s"
    }
  },
  
  "best_practices": {
    "naming": {
      "test_files": "test_开头或_test结尾",
      "test_functions": "test_开头，描述测试场景",
      "test_classes": "Test开头，组织相关测试"
    },
    "structure": {
      "aaa_pattern": "Arrange-Act-Assert模式",
      "one_assertion": "每个测试一个核心断言",
      "descriptive_names": "使用描述性的测试名称"
    },
    "fixtures": {
      "conftest_py": "共享测试设置和fixture",
      "scope_management": "合理设置fixture作用域",
      "cleanup": "确保测试后清理资源"
    },
    "mocking": {
      "external_services": "Mock外部服务和API调用",
      "database_operations": "Mock数据库操作",
      "file_operations": "Mock文件系统操作"
    }
  },
  
  "common_packages": {
    "testing": {
      "pytest": "pytest>=7.0.0",
      "pytest-cov": "pytest-cov>=4.0.0",
      "pytest-mock": "pytest-mock>=3.10.0",
      "pytest-xdist": "pytest-xdist>=3.0.0",
      "factory-boy": "factory-boy>=3.2.0"
    },
    "mocking": {
      "responses": "responses>=0.23.0",
      "freezegun": "freezegun>=1.2.0",
      "pytest-httpserver": "pytest-httpserver>=1.0.0"
    },
    "quality": {
      "flake8": "flake8>=6.0.0",
      "black": "black>=23.0.0",
      "isort": "isort>=5.12.0",
      "mypy": "mypy>=1.0.0",
      "bandit": "bandit>=1.7.0"
    },
    "web_testing": {
      "selenium": "selenium>=4.0.0",
      "requests": "requests>=2.28.0",
      "httpx": "httpx>=0.24.0"
    }
  },
  
  "templates": {
    "unit_test": {
      "pytest": "import pytest\nfrom src.user_service import UserService, CreateUserRequest\n\ndef test_should_create_user_successfully():\n    # Arrange\n    user_service = UserService()\n    request = CreateUserRequest(email='test@example.com', name='Test User')\n    \n    # Act\n    result = user_service.create_user(request)\n    \n    # Assert\n    assert result.email == 'test@example.com'\n    assert result.name == 'Test User'\n    assert result.id is not None",
      "unittest": "import unittest\nfrom src.user_service import UserService, CreateUserRequest\n\nclass TestUserService(unittest.TestCase):\n    \n    def setUp(self):\n        self.user_service = UserService()\n    \n    def test_should_create_user_successfully(self):\n        # Arrange\n        request = CreateUserRequest(email='test@example.com', name='Test User')\n        \n        # Act\n        result = self.user_service.create_user(request)\n        \n        # Assert\n        self.assertEqual(result.email, 'test@example.com')\n        self.assertEqual(result.name, 'Test User')\n        self.assertIsNotNone(result.id)\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    "parametrized_test": {
      "pytest": "import pytest\nfrom src.validator import EmailValidator\n\n@pytest.mark.parametrize('email,expected', [\n    ('valid@example.com', True),\n    ('invalid-email', False),\n    ('', False),\n    ('test@', False),\n])\ndef test_email_validation(email, expected):\n    # Arrange\n    validator = EmailValidator()\n    \n    # Act\n    result = validator.is_valid(email)\n    \n    # Assert\n    assert result == expected"
    },
    "mock_test": {
      "pytest_mock": "import pytest\nfrom unittest.mock import Mock\nfrom src.user_service import UserService\nfrom src.user_repository import UserRepository\n\ndef test_should_create_user_with_repository(mocker):\n    # Arrange\n    mock_repository = mocker.Mock(spec=UserRepository)\n    mock_repository.save.return_value = Mock(id=1, email='test@example.com')\n    user_service = UserService(mock_repository)\n    \n    # Act\n    result = user_service.create_user('test@example.com', 'Test User')\n    \n    # Assert\n    assert result.id == 1\n    mock_repository.save.assert_called_once()"
    },
    "integration_test": {
      "requests": "import pytest\nimport requests\nfrom src.app import create_app\n\n@pytest.fixture\ndef client():\n    app = create_app(testing=True)\n    with app.test_client() as client:\n        yield client\n\ndef test_create_user_api(client):\n    # Arrange\n    user_data = {'email': 'integration@test.com', 'name': 'Integration Test'}\n    \n    # Act\n    response = client.post('/api/users', json=user_data)\n    \n    # Assert\n    assert response.status_code == 201\n    assert response.json['email'] == 'integration@test.com'"
    }
  },
  
  "virtual_environments": {
    "venv": {\n      "create": "python -m venv venv",\n      "activate": {\n        "windows": "venv\\\\Scripts\\\\activate",\n        "unix": "source venv/bin/activate"\n      },\n      "deactivate": "deactivate"\n    },\n    "conda": {\n      "create": "conda create -n project-name python=3.9",\n      "activate": "conda activate project-name",\n      "deactivate": "conda deactivate"\n    },\n    "poetry": {\n      "create": "poetry install",\n      "shell": "poetry shell",\n      "run": "poetry run command"\n    }\n  }\n}