{
  "name": "Go/Modules",
  "framework": "go",
  "version": "1.0.0",
  "description": "Go语言项目配置模板，支持Go Modules",
  
  "detection": {
    "files": ["go.mod", "go.sum", "main.go"],
    "directories": ["vendor", "cmd", "pkg", "internal"],
    "build_tools": ["go"]
  },
  
  "test": {
    "directories": [".", "pkg", "internal", "cmd"],
    "patterns": {
      "unit": ["*_test.go"],
      "integration": ["*_integration_test.go"],
      "benchmark": ["*_bench_test.go"]
    },
    "frameworks": {
      "unit": ["testing", "testify", "ginkgo", "gomega"],
      "integration": ["testcontainers-go", "httptest"],
      "mocking": ["gomock", "testify/mock"]
    }
  },
  
  "commands": {
    "build": "go build ./...",
    "test": {
      "unit": "go test ./...",
      "verbose": "go test -v ./...",
      "coverage": "go test -cover ./...",
      "coverage_html": "go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out",
      "race": "go test -race ./...",
      "short": "go test -short ./...",
      "bench": "go test -bench=. ./..."
    },
    "lint": {
      "fmt": "go fmt ./...",
      "vet": "go vet ./...",
      "golangci_lint": "golangci-lint run",
      "staticcheck": "staticcheck ./..."
    },
    "mod": {
      "tidy": "go mod tidy",
      "download": "go mod download",
      "verify": "go mod verify",
      "vendor": "go mod vendor"
    }
  },
  
  "tools": {
    "testing": {
      "testing": {
        "package": "testing",
        "functions": ["func TestXxx(*testing.T)", "func BenchmarkXxx(*testing.B)"],
        "methods": ["t.Error", "t.Fatal", "t.Skip", "t.Log"]
      },
      "testify": {
        "package": "github.com/stretchr/testify",
        "imports": ["assert", "require", "suite", "mock"],
        "benefits": "更丰富的断言和Mock功能"
      },
      "ginkgo": {
        "package": "github.com/onsi/ginkgo/v2",
        "style": "BDD风格测试框架",
        "commands": ["ginkgo", "ginkgo watch"]
      }
    },
    "mocking": {
      "gomock": {
        "package": "github.com/golang/mock/gomock",
        "generate": "go generate ./...",
        "directive": "//go:generate mockgen"
      },
      "testify_mock": {
        "package": "github.com/stretchr/testify/mock",
        "usage": "结构体嵌入mock.Mock"
      }
    },
    "quality": {
      "golangci_lint": "多种linter集成工具",
      "staticcheck": "静态分析工具",
      "gosec": "安全扫描工具",
      "ineffassign": "未使用变量检测"
    }
  },
  
  "structure": {
    "standard_layout": {
      "cmd/": "可执行文件入口",
      "pkg/": "可被外部使用的库代码",
      "internal/": "私有应用和库代码",
      "api/": "API定义文件",
      "web/": "Web应用相关文件",
      "configs/": "配置文件",
      "init/": "系统初始化文件",
      "scripts/": "构建、安装、分析等脚本",
      "test/": "额外的外部测试应用和测试数据",
      "docs/": "设计和用户文档",
      "tools/": "项目支持工具",
      "examples/": "应用程序或公共库的示例",
      "vendor/": "应用程序依赖项"
    },
    "simple_layout": {
      "main.go": "主入口文件",
      "*_test.go": "测试文件",
      "go.mod": "模块定义",
      "go.sum": "依赖校验和"
    }
  },
  
  "tdd": {
    "red_phase": {
      "commands": ["go test -run TestSpecific ./package"],
      "expectations": "测试失败，编译成功，错误信息明确"
    },
    "green_phase": {
      "commands": ["go test -run TestSpecific ./package"],
      "expectations": "最小实现让测试通过"
    },
    "refactor_phase": {
      "commands": [
        "go test ./...",
        "go test -cover ./...",
        "go fmt ./...",
        "go vet ./...",
        "golangci-lint run"
      ],
      "expectations": "重构代码，保持测试通过，提升代码质量"
    }
  },
  
  "quality_gates": {
    "coverage": {
      "threshold": 80,
      "critical_paths": 90
    },
    "performance": {
      "test_timeout": "10m",
      "benchmark_threshold": "不能有明显性能回归"
    },
    "code_quality": {
      "cyclomatic_complexity": 10,
      "function_length": 50
    }
  },
  
  "best_practices": {
    "naming": {
      "test_functions": "TestXxxYyy形式，Xxx是被测试的函数或方法",
      "benchmark_functions": "BenchmarkXxx形式",
      "example_functions": "ExampleXxx形式"
    },
    "structure": {
      "table_driven": "使用表驱动测试覆盖多种场景",
      "subtests": "使用t.Run创建子测试",
      "setup_teardown": "合理使用TestMain进行设置和清理"
    },
    "assertions": {
      "clear_errors": "提供清晰的错误消息",
      "avoid_panic": "测试中避免panic，使用t.Error/t.Fatal",
      "test_coverage": "关注测试覆盖率和边界情况"
    }
  },
  
  "common_packages": {
    "testing": {
      "testify": "github.com/stretchr/testify v1.8.4",
      "ginkgo": "github.com/onsi/ginkgo/v2 v2.13.0",
      "gomega": "github.com/onsi/gomega v1.28.0"
    },
    "mocking": {
      "gomock": "github.com/golang/mock v1.6.0",
      "testify-mock": "github.com/stretchr/testify/mock"
    },
    "integration": {
      "testcontainers": "github.com/testcontainers/testcontainers-go v0.25.0",
      "httptest": "net/http/httptest (标准库)"
    },
    "quality": {
      "golangci-lint": "github.com/golangci/golangci-lint v1.55.0",
      "staticcheck": "honnef.co/go/tools/staticcheck",
      "gosec": "github.com/securecodewarrior/gosec/v2"
    }
  },
  
  "templates": {
    "unit_test": {
      "basic": "package user\n\nimport (\n\t\"testing\"\n)\n\nfunc TestCreateUser(t *testing.T) {\n\t// Arrange\n\tuserService := NewUserService()\n\temail := \"test@example.com\"\n\tname := \"Test User\"\n\n\t// Act\n\tuser, err := userService.CreateUser(email, name)\n\n\t// Assert\n\tif err != nil {\n\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t}\n\tif user.Email != email {\n\t\tt.Errorf(\"Expected email %s, got %s\", email, user.Email)\n\t}\n\tif user.Name != name {\n\t\tt.Errorf(\"Expected name %s, got %s\", name, user.Name)\n\t}\n}",
      "testify": "package user\n\nimport (\n\t\"testing\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCreateUser(t *testing.T) {\n\t// Arrange\n\tuserService := NewUserService()\n\temail := \"test@example.com\"\n\tname := \"Test User\"\n\n\t// Act\n\tuser, err := userService.CreateUser(email, name)\n\n\t// Assert\n\trequire.NoError(t, err)\n\tassert.Equal(t, email, user.Email)\n\tassert.Equal(t, name, user.Name)\n\tassert.NotEmpty(t, user.ID)\n}"
    },
    "table_driven_test": {
      "example": "func TestEmailValidation(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\temail    string\n\t\texpected bool\n\t}{\n\t\t{\"valid email\", \"test@example.com\", true},\n\t\t{\"invalid email\", \"invalid-email\", false},\n\t\t{\"empty email\", \"\", false},\n\t\t{\"email without domain\", \"test@\", false},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\t// Arrange\n\t\t\tvalidator := NewEmailValidator()\n\n\t\t\t// Act\n\t\t\tresult := validator.IsValid(tt.email)\n\n\t\t\t// Assert\n\t\t\tassert.Equal(t, tt.expected, result)\n\t\t})\n\t}\n}"
    },
    "benchmark_test": {
      "example": "func BenchmarkCreateUser(b *testing.B) {\n\tuserService := NewUserService()\n\tb.ResetTimer()\n\n\tfor i := 0; i < b.N; i++ {\n\t\t_, err := userService.CreateUser(\"test@example.com\", \"Test User\")\n\t\tif err != nil {\n\t\t\tb.Fatal(err)\n\t\t}\n\t}\n}"
    },
    "mock_test": {
      "gomock": "//go:generate mockgen -source=user_repository.go -destination=mocks/mock_user_repository.go\n\nfunc TestCreateUserWithMock(t *testing.T) {\n\t// Arrange\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tmockRepo := mocks.NewMockUserRepository(ctrl)\n\tuserService := NewUserService(mockRepo)\n\n\texpectedUser := &User{ID: \"123\", Email: \"test@example.com\", Name: \"Test User\"}\n\tmockRepo.EXPECT().Save(gomock.Any()).Return(expectedUser, nil)\n\n\t// Act\n\tresult, err := userService.CreateUser(\"test@example.com\", \"Test User\")\n\n\t// Assert\n\trequire.NoError(t, err)\n\tassert.Equal(t, expectedUser, result)\n}"
    }
  },
  
  "ci_cd": {
    "github_actions": {\n      \"setup\": \"actions/setup-go@v4\",\n      \"cache\": \"actions/cache@v3 with go-sum\",\n      \"test\": \"go test -race -coverprofile=coverage.out ./...\",\n      \"coverage\": \"go tool cover -html=coverage.out -o coverage.html\"\n    },\n    \"docker\": {\n      \"multi_stage\": \"使用多阶段构建减少镜像大小\",\n      \"static_binary\": \"CGO_ENABLED=0 构建静态二进制文件\"\n    }\n  }\n}