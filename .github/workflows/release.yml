name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease

jobs:
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    permissions:
      contents: read   # 读取代码
      packages: write  # 发布包权限
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    permissions:
      contents: read   # 读取代码
      packages: write  # 发布包权限
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@MuziGeek'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Prepare for GitHub Packages
      run: |
        # 复制 GitHub Packages 配置
        cp .npmrc.github .npmrc
        # 修改包名为作用域包
        npm pkg set name="@MuziGeek/claude-tdd-cli"
      
    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup after GitHub Packages publish
      run: |
        # 恢复原始包名
        npm pkg set name="claude-tdd-cli"
        # 删除临时 .npmrc 文件
        rm -f .npmrc

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write  # 允许写入内容（创建标签、推送代码）
      packages: write  # 允许发布包
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: npm run build
      
    - name: Bump version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Generate Release Notes
      run: |
        # 获取上一个版本标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --exclude="v${{ env.NEW_VERSION }}" 2>/dev/null || echo "")
        
        # 生成提交日志
        if [ -n "$PREVIOUS_TAG" ]; then
          COMMIT_LOG=$(git log --oneline --pretty=format:"- %s" "$PREVIOUS_TAG"..HEAD)
        else
          COMMIT_LOG=$(git log --oneline --pretty=format:"- %s" -10)
        fi
        
        # 提取不同类型的变更
        FEATURES=$(echo "$COMMIT_LOG" | grep -i "feat\|feature" || echo "")
        FIXES=$(echo "$COMMIT_LOG" | grep -i "fix\|bugfix" || echo "")
        DOCS=$(echo "$COMMIT_LOG" | grep -i "docs\|documentation" || echo "")
        CHORES=$(echo "$COMMIT_LOG" | grep -i "chore\|refactor\|style" || echo "")
        
        cat > RELEASE_NOTES.md << EOF
        ## 🚀 Claude TDD CLI v${{ env.NEW_VERSION }}
        
        $(if [ -n "$FEATURES" ]; then
        echo "### ✨ 新功能"
        echo "$FEATURES"
        echo ""
        fi)
        
        $(if [ -n "$FIXES" ]; then
        echo "### 🐛 问题修复"
        echo "$FIXES"
        echo ""
        fi)
        
        $(if [ -n "$DOCS" ]; then
        echo "### 📚 文档更新"
        echo "$DOCS"
        echo ""
        fi)
        
        $(if [ -n "$CHORES" ]; then
        echo "### 🔧 其他改进"
        echo "$CHORES"
        echo ""
        fi)
        
        ### 📦 安装方式
        
        \`\`\`bash
        # 全局安装
        npm install -g claude-tdd-cli@${{ env.NEW_VERSION }}
        
        # 或者使用最新版本
        npm install -g claude-tdd-cli@latest
        \`\`\`
        
        ### 🚀 快速开始
        
        \`\`\`bash
        # 查看版本
        claude-tdd --version
        
        # 初始化TDD工作流
        claude-tdd init
        
        # 诊断环境
        claude-tdd doctor
        
        # 查看帮助
        claude-tdd --help
        \`\`\`
        
        ---
        
        $(if [ -n "$PREVIOUS_TAG" ]; then
        echo "**完整更新日志**: https://github.com/MuziGeek/claude-tdd-cli/compare/$PREVIOUS_TAG...v${{ env.NEW_VERSION }}"
        else
        echo "**项目主页**: https://github.com/MuziGeek/claude-tdd-cli"
        fi)
        
        **文档**: [使用说明](https://github.com/MuziGeek/claude-tdd-cli#readme) | [示例项目](https://github.com/MuziGeek/claude-tdd-cli/tree/main/examples)
        EOF
        
    - name: Create Tag and Push
      run: |
        git add package.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        git push origin main
        git push origin "v${{ env.NEW_VERSION }}"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Claude TDD CLI v${{ env.NEW_VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(env.NEW_VERSION, 'beta') || contains(env.NEW_VERSION, 'alpha') || contains(env.NEW_VERSION, 'rc') }}

  publish-after-release:
    name: Publish to NPM after GitHub Release
    runs-on: ubuntu-latest
    needs: create-github-release
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read   # 读取代码
      packages: write  # 发布包权限
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github-packages-after-release:
    name: Publish to GitHub Packages after GitHub Release
    runs-on: ubuntu-latest
    needs: create-github-release
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read   # 读取代码
      packages: write  # 发布包权限
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@MuziGeek'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Prepare for GitHub Packages
      run: |
        # 复制 GitHub Packages 配置
        cp .npmrc.github .npmrc
        # 修改包名为作用域包
        npm pkg set name="@MuziGeek/claude-tdd-cli"
      
    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup after GitHub Packages publish
      run: |
        # 恢复原始包名
        npm pkg set name="claude-tdd-cli"
        # 删除临时 .npmrc 文件
        rm -f .npmrc

  create-success-summary:
    name: Create Success Summary
    runs-on: ubuntu-latest
    needs: [publish-after-release, publish-github-packages-after-release]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Create Success Summary
      run: |
        echo "🎉 Successfully released Claude TDD CLI!" >> $GITHUB_STEP_SUMMARY
        echo "📦 Package published to NPM" >> $GITHUB_STEP_SUMMARY
        echo "📦 Package published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ GitHub release created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: $(node -p 'require(\"./package.json\").version')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**从 npm 安装**: \`npm install -g claude-tdd-cli@latest\`" >> $GITHUB_STEP_SUMMARY
        echo "**从 GitHub Packages 安装**: \`npm install -g @MuziGeek/claude-tdd-cli --registry https://npm.pkg.github.com\`" >> $GITHUB_STEP_SUMMARY